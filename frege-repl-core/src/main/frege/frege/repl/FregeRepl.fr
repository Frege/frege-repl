module frege.repl.FregeRepl where

import frege.Version
import Java.Net
import Data.List
import Interpreter.FregeInterpreter
import Compiler.common.CompilerOptions (flagtree)
import Compiler.enums.Flags
import Compiler.types.Global hiding (Message, Severity)
import Compiler.types.Global (Message CompilerMessage, Severity())
import Compiler.types.Positions
import Java.Swing
import Java.Awt (Component, ActionListener)
import Java.Util (Scanner, ArrayList, Collection)
import frege.Prelude hiding (print)
import frege.Prelude (print pPrint)
import Control.monad.trans.MonadIO
import Control.monad.State
import Repl.Gui

data ReplEnv = ReplEnv
    { lastJavaGenSrc :: Maybe String
    , lastExternalScript :: Maybe String
    , opts :: ReplOpts
    , config :: InterpreterConfig
    , state :: MutableIO InterpreterClassLoader
    }
  where
    default = do
      loader <- InterpreterClassLoader.new ()
      return ReplEnv
        { lastJavaGenSrc = Nothing -- To display last generated Java Source
        , lastExternalScript = Nothing -- To reload last external script
        , opts = ReplOpts.default
        , config = InterpreterConfig.default
        , state = loader
        }

    reset = do
      loader <- liftIO $ InterpreterClassLoader.new ()
      Repl.modify ReplEnv.{
                            state = loader
                          , lastExternalScript = Nothing
                          , lastJavaGenSrc = Nothing
                          , config <- InterpreterConfig.{predefs = ""}
                          }


data ReplOpts = ReplOpts
    { prompt :: String
    , multilinePrompt :: String
    }
  where
    default = ReplOpts
      { prompt = "frege> "
      , multilinePrompt = "> "
      }

data Repl a = Repl {un :: StateT ReplEnv IO a} where
  get = Repl $ StateT.get
  put s = Repl $ StateT.put s
  modify f = do
      s <- Repl.get
      Repl.put (f s)
  run (Repl s) env = s.run env
  runWithDefault (Repl s) = ReplEnv.default >>= s.run

instance Monad Repl where
  return = Repl . return
  (Repl state) >>= f = Repl $ state >>= (\a -> Repl.un $ f a)

instance MonadIO Repl where
  liftIO = Repl . liftIO


data ReplResult = ReplInfo [Message]
                | CodeInfo {
                    sourceRepr :: SourceInfo,
                    compilerState :: Global,
                    messages :: [Message]
                  }
                | JavaSource String
                | DocHelp String

repl :: ReplIO a => a -> ReplEnv -> IO ()
repl console env = do
  cmd <- read console env
  (res, newEnv) <- Repl.run (eval cmd) env
  print console cmd res newEnv
  loop console cmd res newEnv

read :: ReplIO a => a -> ReplEnv -> IO Command
read console state = do
   console.writeln ""
   lineMaybe <- console.readline state.opts.prompt
   maybe (return Quit) readMore lineMaybe
 where
   readAgain = read console state
   readResource path = do
     res <- slurp path
     either (\msg -> console.writeln (show msg) >> readAgain) return res
   readMore line = case Command.parse line of
     Left err -> (console.writeln err) >> readAgain
     Right DefMulti -> readMultiline console state.opts.multilinePrompt >>= (return . Eval)
     Right Reload -> maybe
       (console.writeln "No source to reload!" >> readAgain) readResource state.lastExternalScript
     Right (Load path) -> readResource path
     Right cmd -> return cmd

print :: ReplIO a => a -> Command -> ReplResult -> ReplEnv -> IO ()
print _ Java (JavaSource src) _ = javaSourceGUI src
print _ (HelpDoc src) (DocHelp doc) _ = if null doc then return () else helpGUI src doc
print console _ (ReplInfo msgs) env = printMessages console msgs
print console (cmd@(Eval line)) (CodeInfo sourceRepr g msgs) env = case sourceRepr of
  Expression sym | isVariable g sym =
    if isString g sym
      then console.interpretSym g sym env
      else do
        let evalShow = do
                        let varDecl = variableDeclScript sym.name.base line
                            updatePredefs predefs = predefs ++ "\n" ++ varDecl
                        when (line /= sym.name.base) $
                          Repl.modify ReplEnv.{config <- InterpreterConfig.{predefs <- updatePredefs}}
                        eval (Eval $ buildShowScript sym.name.base g sym)
        (res, newEnv) <- Repl.run evalShow env
        case res of
          CodeInfo{} -> print console cmd res newEnv
          _ -> do
                  let typeCmd = Type line
                  (res, newEnv) <- Repl.run (eval typeCmd) env
                  print console typeCmd res newEnv
  Expression sym = printSymbolType console g sym
  Definitions syms markerSym = do
    let symLabels = map (showSymbol g) $ filter (not . Symbol.{alias?}) newSyms
        newSyms = filter (\sym -> sym.pos.line > lineStart) syms
        lineStart = markerSym.pos.line
    when (not $ null symLabels) $ console.writeln $ intercalate newLine symLabels
    printMessages console (filter (\msg -> msg.pos.line > lineStart) msgs)
  Module moduleName = do
    console.writeln $ "Module " ++ moduleName
    printMessages console msgs
print console (LoadExternal path script) res env = print console (Eval script) res env
print _ _ _ _ = return ()

loop :: ReplIO a => a -> Command -> ReplResult -> ReplEnv -> IO ()
loop console Quit _ _ = return ()
loop console Reset _ env = repl console env
loop console _ _ env = repl console env

eval :: Command -> Repl ReplResult
eval (Eval line) = do
  env <- Repl.get
  (res, newState) <- liftIO $ Interpreter.run (interpret line) env.config env.state
  case res of
    InterpreterResult.Success{sourceRepr=sourceRepr, compilerState=g} -> do
      case sourceRepr of
        Module moduleName -> do
          let importModuleStmt = "import " ++ moduleName
          Repl.modify ReplEnv.{lastJavaGenSrc=Just line,
                               state = newState}
          newEnv <- Repl.get
          let updatePredefs predefs = predefs ++ "\n" ++ importModuleStmt
          when (not $ containsStr newEnv.config.predefs importModuleStmt) $
            Repl.modify ReplEnv.{config <- InterpreterConfig.{predefs<-updatePredefs}}
        Definitions syms separatorSym -> do
          let varName = separatorSym.name.base
              separator = varName ++ " = 0"
              updatePredefs predefs = predefs ++ "\n" ++ separator ++ "\n" ++ line
          Repl.modify ReplEnv.{lastJavaGenSrc=Nothing, config <- InterpreterConfig.{predefs<-updatePredefs}}
        Expression{} -> do
          Repl.modify ReplEnv.{lastJavaGenSrc=Just line, state = newState}
      return $ CodeInfo sourceRepr g (Message.fromGlobal g)
    InterpreterResult.Failure messages -> return $ ReplInfo messages

eval (Type expr) = do
  env <- Repl.get
  res <- liftIO $ fst <$> Interpreter.run (typeof expr) env.config env.state
  return $ either ReplInfo (\typ -> ReplInfo [Message.info typ]) res

eval (LoadExternal src script) = do
  res <- eval (Eval script)
  case res of
    CodeInfo{} -> Repl.modify ReplEnv.{lastExternalScript=Just src} >> return res
    _ -> return res

eval (BrowseModule moduleName) = do
  env <- Repl.get
  res <- liftIO $ fst <$> Interpreter.run (browseModule moduleName) env.config env.state
  let wanted sym = sym.name.base !~ '^frege_interpreter_var'
  return $ maybe (ReplInfo []) (\(syms, g) -> symbolsToReplInfo g . filter wanted $ syms) res

eval Browse = do
  env <- Repl.get
  let src = env.config.predefs
  res <- liftIO $ fst <$> Interpreter.run (browse src) env.config.{predefs=""} env.state
  Repl.put env
  let wanted sym = sym.name.base !~ '^frege_interpreter_var'
  return $ maybe (ReplInfo []) (\(syms, g) -> symbolsToReplInfo g . filter wanted $ syms) res

eval (HelpDoc name) = do
  env <- Repl.get
  res <- liftIO $ fst <$> Interpreter.run (docHelp name) env.config env.state
  return $ either ReplInfo DocHelp res

eval Java = do
  env <- Repl.get
  let javagenDefs "" = return (ReplInfo [Message.info "Empty source!"])
      javagenDefs defs = do
        oldEnv <- Repl.get
        Repl.modify ReplEnv.{config <- InterpreterConfig.{predefs=""}}
        res <- java defs
        Repl.put oldEnv
        return res
  maybe (javagenDefs env.config.predefs) (\src -> java src) env.lastJavaGenSrc

eval (Set s) | Just (Just prompt : _) <- s `match` 'multiline-prompt\s+(.+)' =
  do
    Repl.modify ReplEnv.{opts <- ReplOpts.{multilinePrompt = prompt}}
    return $ ReplInfo []

eval (Set s) | Just (Just prompt : _) <- s `match` 'prompt\s+(.+)' =
  do
    Repl.modify ReplEnv.{opts <- ReplOpts.{prompt = prompt}}
    return $ ReplInfo []

eval (Set "v") = parseAndSetCompilerFlag "-v"
eval (Set "hints") = parseAndSetCompilerFlag "-hints"
eval (Set "nowarn") = parseAndSetCompilerFlag "-nowarn"
eval (Set "inline") = parseAndSetCompilerFlag "-inline"
eval (Set "O") = parseAndSetCompilerFlag "-O"
eval (Set "comments") = parseAndSetCompilerFlag "-comments"
eval (Set "ascii") = parseAndSetCompilerFlag "-ascii"
eval (Set "greek") = parseAndSetCompilerFlag "-greek"
eval (Set "fraktur") = parseAndSetCompilerFlag "-fraktur"
eval (Set "latin") = parseAndSetCompilerFlag "-latin"
eval (Set unknown) = return $ ReplInfo [Message.error ("Invalid option: " ++ unknown)]

eval (Unset "v") = clearCompilerFlag Flag.VERBOSE
eval (Unset "hints") = clearCompilerFlag Flag.HINTS
eval (Unset "nowarn") = setCompilerFlag Flag.WARNINGS
eval (Unset "inline") = clearCompilerFlag Flag.INLINE
eval (Unset "O") = clearCompilerFlag Flag.OPTIMIZE
eval (Unset "comments") = clearCompilerFlag Flag.COMMENTS
eval (Unset "ascii") = setCompilerFlag Flag.USEUNICODE
eval (Unset "greek") = clearCompilerFlag Flag.USEGREEK
eval (Unset "fraktur") = clearCompilerFlag Flag.USEFRAKTUR
eval (Unset "latin") = clearCompilerFlag Flag.USEGREEK >> clearCompilerFlag Flag.USEFRAKTUR
eval (Unset unknown) = return $ ReplInfo [Message.error ("Invalid option: " ++ unknown)]

eval History = do
  env <- Repl.get
  let change acc item = if item ~ separator then acc ++ "\n--frege>\n" else acc ++ item ++ "\n"
      separator = '^frege_interpreter_var'
  return $ ReplInfo [Message.info $ fold change "" . lines $ env.config.predefs]

eval Reset = ReplEnv.reset >> return (ReplInfo [])

eval Version = return $ ReplInfo [Message.info version]
eval Help = return $ ReplInfo [Message.info (help cmdHelp)]
eval _ = return $ ReplInfo []

parseAndSetCompilerFlag flag = do
  env <- Repl.get
  case flagtree.lookup flag of
    Just f -> do
      Repl.modify ReplEnv.{config <- InterpreterConfig.{compilerFlags <- f}}
      return $ ReplInfo []
    Nothing -> return $ ReplInfo [Message.error ("invalid flag " ++ flag)]

clearCompilerFlag flag = do
  Repl.modify ReplEnv.{config <- InterpreterConfig.{compilerFlags <- (\flags -> Flags.clrFlag flags flag)}}
  return $ ReplInfo []

setCompilerFlag flag = do
  Repl.modify ReplEnv.{config <- InterpreterConfig.{compilerFlags <- (\flags -> Flags.setFlag flags flag)}}
  return $ ReplInfo []

symbolsToReplInfo g syms = ReplInfo $ map (Message.info . showSymbol g) wantedSyms where
  wantedSyms = filter wanted syms
  wanted (sym :: Symbol)
    | sym.{alias?} = false
    | otherwise = true

java src = do
    env <- Repl.get
    res <- liftIO $ fst <$> Interpreter.run (javaSource src) env.config env.state
    return $ either ReplInfo JavaSource res

slurp :: String -> IO (Message | Command)
slurp (urlSpec@'.*?://.*') = do
      url <- URL.new urlSpec
      script <- urlContents url
      return . Right $ LoadExternal urlSpec script
  `catch` handleIOE where
    handleIOE (ioe :: IOException) = return $ Left (Message.error (showThrowableCause ioe))
slurp filePath = do
   script <- fileContents filePath
   return . Right . LoadExternal filePath $ script
 `catch` handleIOE where
    handleIOE (ioe :: IOException) = return $ Left (Message.error (showThrowableCause ioe))

printMessages :: ReplIO a => a -> [Message] -> IO ()
printMessages console [] = return ()
printMessages console msgs = mapM_ (console.writeln . show) msgs

printSymbolType :: ReplIO a => a -> Global -> Symbol -> IO ()
printSymbolType console g sym = console.writeln (getSymbolType g sym)

readMultiline :: ReplIO a => a -> String -> IO String
readMultiline console multilinePrompt = intercalate newLine . reverse <$> f [] where
  f acc = do
    lineMaybe <- console.readline multilinePrompt
    let line = maybe ":}" id lineMaybe
    if (line == ":}")
      then console.writeln "" >> return acc
      else f (line : acc)


cmdHelp = [(":t or :type <expression>", "Display the type of an expression."),
            (":browse <module name>", "Display the names in a module if " ++
                "a module name is provided otherwise display the names in the default REPL module."),
            (":load <url or file>", "Load Frege code snippets from an URL or file."),
            (":java", "View Java translation of last compiled Frege source."),
            (":r", "Reload the last url or file source."),
            (":history", "Display the source history for definitions in the default REPL module."),
            (":reset", "Reset the session discarding all evaluated scripts."),
            (":version", "Display Frege version."),
            (":{", "Start multiline definitions."),
            (":}", "End multiline definitions."),
            (":set prompt promptString", "Set prompt to `promptString`."),
            (":set multiline-prompt promptString", "Set prompt for multi-line mode."),
            (":set compilerOption", "Set compiler option such as 'hints', 'nowarn', 'inline', 'O', 'comments',"
                                      ++ "'ascii', 'greek', 'fraktur', 'latin'."),
            (":unset compilerOption", "Unset compiler option."),
            (":help <name>", "Display the documentation for the given name." ++
                            " If the name is not provided, display this help message."),
            (":q or :quit", "Quit REPL")]

renderCmdHelp cmdHelp = map render cmdHelp where
    maxLeftIndent = length . fst $ maximumBy (compare `on` (length . fst)) cmdHelp
    indent cmd desc width = cmd ++ (concat $ replicate (width - cmd.length) " ") ++
        " - " ++ desc
    render (cmd, desc) = indent cmd desc maxLeftIndent

help cmdHelp = intercalate newLine $ header ++ body where
    header = ["At the prompt, you can enter Frege code snippets to get them evaluated.",
            "The output or compilation errors will be printed below the prompt.",
            "In addition to Frege code, the following commands are supported:\n"]
    body = renderCmdHelp cmdHelp

data ConsoleReader = mutable native jline.console.ConsoleReader where
  native new :: () -> IO ConsoleReader throws IOException
              | String
                -> InputStream
                -> OutputStream
                -> Maybe Terminal
                -> String
                -> IO ConsoleReader
                throws IOException

  native readLine :: ConsoleReader -> String -> IO (Maybe String) throws IOException
                   | ConsoleReader -> IO (Maybe String) throws IOException
  native println :: ConsoleReader -> String -> IO () throws IOException
  native print :: ConsoleReader -> CharSequence -> IO () throws IOException
  native setPrompt :: ConsoleReader -> String -> IO ()
  native setExpandEvents :: ConsoleReader -> Bool -> IO ()

data Terminal = mutable native jline.Terminal

urlContents url = do
    inStream <- URL.openStream url
    scanner <- scannerFromInputStream inStream
    scanner.useDelimiter '\Z'
    scanner.next `finally` scanner.close

fileContents filePath = do
    file <- File.new filePath
    scanner <- Scanner.new file "utf-8"
    scanner.useDelimiter '\Z'
    scanner.next `finally` scanner.close

native scannerFromInputStream new :: InputStream -> IOMutable Scanner

javaSourceGUI :: String -> IO ()
javaSourceGUI javaSource = do
   frame::JFrame <- JFrame.new "Java Source"
   newContentPane::JPanel <- BorderLayout.new () >>= JPanel.new
   frame.setDefaultCloseOperation JFrame.dispose_on_close
   editor::JEditorPane <- JEditorPane.new "text/plain" javaSource
   editor.setEditable false
   scrollPane <- JScrollPane.new editor
   dimension <- Dimension.new 600 600
   JComponent.setPreferredSize scrollPane dimension
   Container.add newContentPane scrollPane (asObject BorderLayout.center)
   frame.setContentPane newContentPane
   frame.pack
   frame.setVisible true


helpGUI :: String -> String -> IO ()
helpGUI title content = do
    frame <- JFrame.new (title ++ " - Documentation")
    frame.setDefaultCloseOperation JFrame.dispose_on_close
    newContentPane:: JPanel <- BorderLayout.new () >>= JPanel.new
    let html :: String
        html
            | index >= 0 = substring content index  -- Skip DOCTYPE
            | otherwise = content
          where
            index = indexOf content "<HTML>"
    editor::JEditorPane <- JEditorPane.new "text/html" html
    editor.setEditable false
    helpLinksListener <- FregeJavaProxy.with showDesktop HyperlinkListener.clazz
    editor.addHyperlinkListener helpLinksListener
    scrollPane <- JScrollPane.new editor
    dimension <- Dimension.new 600 600
    JComponent.setPreferredSize scrollPane dimension
    Container.add newContentPane scrollPane (asObject BorderLayout.center)
    newContentPane.setOpaque true
    frame.setContentPane newContentPane
    frame.pack
    frame.setVisible true

data FregeJavaProxy = pure native frege.interpreter.javasupport.FregeJavaProxy where
  native with frege.interpreter.javasupport.FregeJavaProxy.with ::
    (Object -> Method -> JArray Object -> ST s a) -> Class c -> IO c

showDesktop :: Object -> Method -> JArray Object -> IO ()
showDesktop _ _ args = do
  event <- return $ asHyperlinkEvent $ args.elemAt 0
  d <- Desktop.getDesktop ()
  desktopSupported <- d.isDesktopSupported
  let url = HyperlinkEvent.getURL event
      navigateRelative = either throw d.browse . URI.new $ fixHelpLink event.getDescription
      navigate = maybe navigateRelative (\u -> toURI u >>= d.browse) url
  when (event.getEventType == HyperlinkEvent_EventType.activated) navigate

fixHelpLink s | Just (Just relative : _)
                  <- s `match` '^\.(.*)$' = "http://www.frege-lang.org/doc" ++ relative
fixHelpLink s = s

native toURI :: URL -> ST s URI throws URISyntaxException
pure native asObject "(java.lang.Object)" :: a -> Object

pure native isEmpty :: String -> Bool
pure native replaceAll :: String -> String -> String -> String
pure native indexOf :: String -> String -> Int
pure native substring :: String -> Int -> String
                         | String -> Int -> Int -> String

data Command =
  Version
  | Help
  | HelpDoc String
  | Browse
  | BrowseModule String
  | Type String
  | Load String
  | LoadExternal String String
  | Eval String
  | Java
  | Set String
  | Unset String
  | DefMulti
  | History
  | Reload
  | Reset
  | Skip
  | Quit where

    parse   :: String -> Either String Command
    parse s = parse' $ trim s where
        parse' "" = Right Skip
        parse' '^:' = parseCommand s
        parse' script = Right $ Eval script

    parseCommand s | Just (Just moduleName : _) <- s `match` ':browse\s+(.*)' = Right $ BrowseModule moduleName
    parseCommand s | Just (Just path : _) <- s `match` '^:l.*?\s+(.*)' = Right $ Load path
    parseCommand s | Just (Just src : _) <- s `match` ':help\s+(.*)' = Right $ HelpDoc src
    parseCommand s | Just (Just expr : _) <- s `match` '^:t.*?\s+(.*)' = Right $ Type expr
    parseCommand s | Just (Just option : _) <- s `match` ':set\s+(.*)' = Right $ Set option
    parseCommand s | Just (Just option : _) <- s `match` ':unset\s+(.*)' = Right $ Unset option
    parseCommand  ":version" = Right Version
    parseCommand ":browse" = Right $ Browse
    parseCommand ":{" = Right DefMulti
    parseCommand ":history" = Right History
    parseCommand ":java" = Right Java
    parseCommand ":r" = Right Reload
    parseCommand ":reset" = Right Reset
    parseCommand ":q" = Right Quit
    parseCommand ":quit" = Right Quit
    parseCommand ":help" = Right Help
    parseCommand otherwise = Left "Invalid Command"

derive Eq Command
derive Show Command

vmVendor = maybe "" id $ System.getProperty "java.vm.vendor"
vmName = maybe "" id $ System.getProperty "java.vm.name"
javaVersion = maybe "" id $ System.getProperty "java.version"

pure native toString :: Object -> String
pure native trim :: String -> String
native sysin "java.lang.System.in" :: InputStream

welcome = "Welcome to Frege " ++ version ++ " (" ++ vmVendor ++ " " ++ vmName ++
    ", " ++ javaVersion ++ ")"

class ReplIO a where
  readline :: a -> String -> IO (Maybe String)
  write :: a -> String -> IO ()
  writeln :: a -> String -> IO ()
  interpretSym :: a -> Global -> Symbol -> ReplEnv -> IO ()

instance ReplIO ConsoleReader where
  readline console prompt = try ConsoleReader.readLine console prompt `catch` (\(ioe :: IOException) -> return Nothing)
  write console s = try (flip ConsoleReader.print (CharSequence.fromString s)) console
                      `catch` (\(ioe :: IOException) -> return ())
  writeln console s = try (flip ConsoleReader.println s) console
                        `catch` (\(ioe :: IOException) -> println ioe.getMessage)
  interpretSym console g sym env =
    do
      valMaybe <- fieldValue (symbolClass sym g) (symbolVar sym g) env.state
      console.writeln $ maybe "undefined" id valMaybe
    `catch` (console.writeln . showThrowableCause)


data ReaderWriterConsole = ReaderWriterConsole {input :: BufferedReader, output :: PrintWriter}

instance ReplIO ReaderWriterConsole where
  readline console prompt = try f console `catch` (\(ioe :: IOException) -> return Nothing) where
    f console = do
     console.write prompt
     console.output.flush
     line <- console.input.getLine
     return $ Just line
  write console s = try (\c -> c.output.print s) console
                      `catch` (\(ioe :: IOException) -> return ())
  writeln console s = try (\c -> c.output.println s) console
                      `catch` (\(ioe :: IOException) -> return ())
  interpretSym console g sym env =
    do
      valMaybe <- fieldValue (symbolClass sym g) (symbolVar sym g) env.state
      console.writeln $ maybe "undefined" id valMaybe
    `catch` (console.writeln . showThrowableCause)

readResourceAsString :: String -> IO String
readResourceAsString fileName = do
  cl <- ClassLoader.current
  is <- getResourceAsStream cl fileName
  isr <- InputStreamReader.new is "UTF-8"
  BufferedReader.new isr >>= getContentsOf

native getResourceAsStream :: ClassLoader -> String -> IO InputStream

pure native containsStr contains :: String -> String -> Bool

warmup = do
  env <- ReplEnv.default
  (res, newState) <- Interpreter.run (interpret "show [1..10]") env.config env.state
  case res of
    InterpreterResult.Success{sourceRepr=(Expression sym), compilerState=g} -> fieldValue (symbolClass sym g) (symbolVar sym g) newState
    _ -> return $ Just "ignore"
  return ()

main = do
  console <- ConsoleReader.new "frege" sysin System.out Nothing "UTF-8"
  Runnable.new warmup >>= Thread.new >>= Thread.start
  env <- ReplEnv.default
  console.setPrompt env.opts.prompt
  console.setExpandEvents false
  console.println welcome
  repl console env
  System.exit 0

