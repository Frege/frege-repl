module frege.repl.Froogle where

import frege.repl.FregeRepl hiding (print, main)
import Java.Util (List, Iterator)

main [] = stderr.println "Package name is missing!"

main (packageName: exclusions) = do
  classes ← classesForPackage packageName >>= List.iterator >>= Iterator.toList
  output ← FileOutputStream.new "froogle.txt" true
  console ← ConsoleReader.new "frege" sysin output Nothing "UTF-8"
  env ← ReplEnv.default
  let toRegex s = either throw id $ Regex.compile s
  for classes (f console env (map toRegex exclusions))

f :: ConsoleReader → ReplEnv → [Regex] → Class a → IO ()
f console env exclusions clazz | isExcluded exclusions clazz = return ()
f console env _ clazz = do
  let cmd = BrowseModule clazz.getName
  (res, newEnv) <- Repl.run (eval cmd) env
  case res of
    ReplInfo msgs -> for msgs (console.writeln . show)
    _ -> return ()

isExcluded :: [Regex] → Class a → Bool
isExcluded exclusions clazz = any ((~) clazz.getName) exclusions


native classesForPackage frege.repl.Froogle.packageClasses :: String -> STMutable s (List (Class a))

native module where {
  public static java.util.List<Class<?>> packageClasses(String packageName) {
    java.util.List<Class<?>> classes = new java.util.ArrayList<>();
    try {
         com.google.common.collect.ImmutableSet<com.google.common.reflect.ClassPath.ClassInfo> clsInfos =
           com.google.common.reflect.ClassPath.from(Thread.currentThread().getContextClassLoader())
             .getTopLevelClassesRecursive(packageName);
        for (com.google.common.reflect.ClassPath.ClassInfo clsInfo: clsInfos) {
          Class<?> cls = clsInfo.load();
          if (!cls.isSynthetic() && !cls.isAnonymousClass() && !cls.isLocalClass())
            classes.add(cls);
        }
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
    return classes;
  }
}


